This is a full rewrite of the code running behind myottd.net.

The aim of this project is to learn from the failures of the old code, and improve upon it to provide a solid, maintainable service that people can actually use.

Running a service like myottd.net is difficult - the functionality that your code provides is the only functionality that the users have, and you're responsible for maintaining the entire thing, managing abuse etc.

The objective of the new codebase is to provide a solid and secure foundation which gives users full control of their servers, and provides a good basis upon which to build future functionality.

The service structure has been reworked entirely. Each OpenTTD server is run separately inside a minimalized virtual machine (using the linux-vserver kernel virtualization software). This isolates the servers from eachother and the core system, inclduding resource restrictions for induvidual servers (cpu, mem, disk, network). Because of the security provided by this solution, I can now give users full control of their servers - this includes filesystem access (openttd.cfg, savegames, newgrfs), arbitrary commandline arguments, and raw access to the console. The only restriction is that the service is only intended for running OpenTTD servers, so you can't run arbitrary executables (although this doesn't rule out the possibility for custom OpenTTD versions compiled with user-supplied-patches).

The core management code has been split into multiple separate modules, which run as their own daemons. This provides separation of permissions and security in depth (multiple layers of validation). The daemons communicate with eachother using an XMLRPC API. This API (and the entire codebase for that matter) is public, and many of the methods accept a MyOTTD username/password as authentication. This means that you can do things such as starting and stopping a server directly with an XMLRPC client from your own code.

Ideally the code should be as flexible as possible. It should be possible to build functionality such as a web-based openttd.cfg editor in such a way that it could also be used separately from the entire vserver infrastructure. Users should be able to download the code and run it own their own servers in differing configurations, such as having the web server and other things in the same process, and forking off a single OpenTTD process directly, and then managing this from the web server (in some kind of single-server mode).

In addition to providing the HTML-based interface to manage the servers, it might be a good idea to also offer a "native" interface of some sort. Let users access their server's console directly via an ssh console connection, and access their server's filesystem via SCP/SFTP or somesuch.


