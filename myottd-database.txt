The database used is PostgreSQL. It needs a solid database engine that can handle concurrency properly, support for
transactions etc. The various daemons will each use the database (as their own user - split security around by views, e.g. most daemons don't need to see the password hashes or email addresses in the users table).

The database is used to store historical or "important" data. Things like server status MUST NOT be stored in the database - status will be queried explicitly over XMLRPC, and must not be pushed to the database every time the status changes. Status changes may be logged if needed, but the current status will not be feteched from the database.

users           -- The list of MyOTTD users. People register via the web interface (or possibly externally via the 
                -- XMLRPC API?).
              
    id          serial          -- The user_id as used in the XMLRPC api
    username    varchar(32)     -- The username, as used in the username.myottd.net url, username_1 server name
 N  password    varchar(32)     -- The (hashed) password, used for authenticating in the web and XMLRPC interfaces
    email       varchar(256)    -- The user's email address, used for forgot-my-password things. Needs to be kept
                                -- hidden, preferrably with access control
    registered  timestamp       -- When the user registered, i.e. when this row was first inserted into the 
                                -- database.
 N  verified    timestamp       -- When the account was verified, i.e. the email confirmed.
                                -- If this is NULL, the account has not been activated yet.
 N  last_login  timestamp       -- When the user last logged in.

ottd_versions   -- The list of available OpenTTD versions. Contains the info needed to use it in the vservers,
                -- and the info needed to display it in the GUI.
    
    id          serial          -- (well, why not?)
    name        varchar(32)     -- The short version name used in the filesystem (e.g. 060, 060-beta1)
    description varchar(128)    -- The long version name used in the UI (e.g. 0.6.0, 0.6.0 Beta 1)
    type        varchar(16)     -- The type of version, one of "release", "nightly", "custom".
    available   timestamp       -- When this version was made available
    
resource_classes    -- Used to determine the resource limits for OpenTTD servers - each server has a resource class
                    -- assoicated with it, and the resource limit info is stored in this table
                    
    id          serial
    name        varchar(32)     -- The name of the resource class
    
    disk        integer         -- The size of the data filesystem in MiB.
    ram         integer         -- The amount of ram available, in KiB
    

servers             -- Used to store information on the available servers, such as who owns them, what they are
                    -- called, identifying information (port, IP, ctx_id), resource limits, status (activated etc)
                    
    id          serial          -- The server_id as used in the XMLRPC api
    owner       users(id)       -- The server's owner
    name        varchar(32)     -- The server's name, as used in the username.myottd.net/servername and vserver name
 N  title       varchar(256)    -- The server's longer informative description
 N  port        integer         -- The public TCP/UDP server port used by the server
 N  vserver_id  integer         -- The vserver context ID
 N  ip          inet            -- The vserver's internal IP address (10.22.x.y)
 N  version     ottd_versions(name)     -- The version of OpenTTD that the server should run
    res_class   resource_classes(name)  -- The resource class that the server uses.
    
audit_log           -- The audit log for the XMLRPC api

    id          serial
    daemon      varchar(16)     -- What daemon
    method      varchar(64)     -- What method was called
    client      varchar(128)    -- The client address in <ip>:<port> format
    when        timestamp       -- When the method was called
    username    varchar(40)     -- What the authenticated as, in <auth_type>:<auth_username> format 
                                -- e.g. (internal:mvsrvd, public:foousr1)
    arguments   text            -- The arguments the method was called with, as comma-separated values.
    
console_data        -- The console data for the servers
    id          serial
    server      servers(id)     -- What server
    type        varchar(32)     -- stdin|stdout|stderr
    when        timestamp       -- 
    line        varchar(1024)   -- the line of data
    
user_events         -- Events for users
    id          serial
    user        users(id)
    type        varchar(32)     -- "register", "login", "change_password", "change_email"
    when        timestamp
    client      varchar(128)    -- Identifier for the client, <ip>:<port>
 N  data        varchar(1024)   -- optional type-specific data
    
server_events       -- Events for servers
    id          serial
    server      servers(id)
    type        varchar(32)     -- "create", "start", "stop", "destroy"
    when        timestamp
    client      varchar(128)    -- Identifier for the client, <ip>:<port>
 N  data        varchar(1024)   -- optional type-specific data 

user_verify         -- Data used for verifying new users
    id          serial
    user_id     users(id)       -- The user to verify
    token       varchar(32)     -- The magic token
    sent        timestamp       -- When the verification was sent (used for expiry)
    success_url varchar(512)    -- Redirect the user to the given URL after succesfull verification
                                -- May contain python string formating codes for the following tokens:
                                --      uid
                                --      username
    
    
todo:
    expire user_verifys/users

